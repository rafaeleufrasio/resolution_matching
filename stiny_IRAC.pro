function stiny_IRAC, channel, pixel1, pixel2, grid

; This calls stiny2 to create a PSF for IRAC 3.6 , 4.5 , 5.8 and 8 microns
; It requires pre-existing template files: 
; I1.par  for IRAC Channel 1 (3.6 micron)
; I2.par  for IRAC Channel 2 (4.5 micron)
; I3.par  for IRAC Channel 3 (5.8 micron)
; I4.par  for IRAC Channel 4 (8.0 micron)
; M1.par  for MIPS Channel 1 (24 micron)
; M2w.par for MIPS Channel 2 (70 micron) Wide Field
; M2n.par for MIPS Channel 2 (70 micron) Narrow Field
; M3.par  for MIPS Channel 3 (160 micron)

; INPUT
; channel = 'I1','I2','I3','I4','M1','M2w','M2n', or 'M3'
; pixel1 and pixel2 = pixel scale in arcsec 
; grid = model grid size in pixels (default = )
; /media/Master/stinytim/ : directory where stiny2 is ; please change it properly

;---------------------------------------------------------------

; Check which module is requested and read the appropriate parameter file
ch = string(channel)

  if ch eq 'I1'  then parfile = strarr(135) 
  if ch eq 'I2'  then parfile = strarr(136)
  if ch eq 'I3'  then parfile = strarr(130)
  if ch eq 'I4'  then parfile = strarr(137)
  if ch eq 'M1'  then parfile = strarr(249)
  if ch eq 'M2w' then parfile = strarr(275)
  if ch eq 'M2n' then parfile = strarr(275)
  if ch eq 'M3'  then parfile = strarr(146)
                 
openr,1,ch+'.par'
readf,1,parfile
close,1

; modify the parameter file for:  pixel scale,  grid size
parfile[1] = ch+'_psf'+strmid(parfile[1],strpos(parfile[1],' ='))
parfile[4] = string(pixel1)+strmid(parfile[4],strpos(parfile[4],' ='))
parfile[5] = string(pixel2)+strmid(parfile[5],strpos(parfile[5],' ='))
parfile[7] = string(grid)+strmid(parfile[7],strpos(parfile[7],' ='))

; write a new parameter file
openw,1,'list_'+ch+'.par'
for i=0, n_elements(parfile)-1 do printf,1,parfile[i]
close,1

; run stiny2 on this modified parameter file
spawn,'/media/Master/stinytim/stiny2 list_'+ch+'.par'       ; spawn,'stiny2 list_IRAC.par'

;read and return the PSF
psf = readfits(ch+'_psf.fits')

; delete files generated by the routine
spawn,'rm list_'+ch+'.par'
spawn,'rm '+ch+'_psf.fits'

return,psf
end
